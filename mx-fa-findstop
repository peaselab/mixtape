#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8

"""
FASTA FIND STOP CODONS IN SEQUENCES
(note that gaps are removed prior to searching by default)
James B. Pease
"""

import os
import sys
import argparse
from pylib.mixcore import _LICENSE
from pylib.mixcore import fasta_iter, translate


def generate_argparser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=_LICENSE)
    parser.add_argument('fasta', type=os.path.abspath,
                        help="input fasta file")
    parser.add_argument('--out', type=argparse.FileType('w'),
                        default=sys.stdout, help="output CSV file path")
    parser.add_argument("--keep-aligned", action="store_true",
                        help="do not remove gaps prior to translation")
    parser.add_argument("--ignore-last", action="store_true",
                        help="do not report if the last codon is a stop")
    return parser

def main(arguments=None):
    arguments = arguments if arguments is not None else sys.argv[1:]
    parser = generate_argparser()
    args = parser.parse_args(args=arguments)
    stop_codons = ('TAA', 'TAG', 'TGA', 'UGA', 'UAA', 'UAG')
    for hdr, seq in fasta_iter(args.fasta):
        if args.keep_aligned is False:
            seq = seq.replace("-", "")
        maxrange = (len(seq) 
                    if args.ignore_last is False 
                    else len(seq) - 3)
        for i in range(0, maxrange, 3):
            if seq[i:i+3].upper() in stop_codons:
                print('"{}",{}'.format(hdr, i), 
                      file=args.out)
    return ''

if __name__ == '__main__':
    main()
