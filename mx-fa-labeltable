#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8

"""
FASTA REPLACE LABELS USING CSV OR TSV TABLE
James B. Pease
"""
import os
import sys
import argparse
from pylib.mixcore import _LICENSE
from pylib.mixcore import fasta_iter


def generate_argparser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=_LICENSE)
    parser.add_argument('fasta', type=os.path.abspath,
                        help="input fasta file")
    parser.add_argument('--out', type=argparse.FileType('w'),
                        default=sys.stdout, help="output CSV file path")
    parser.add_argument("--tsv", type=os.path.abspath,
                        help="TSV file")
    parser.add_argument("--csv", type=os.path.abspath,
                        help="CSV file")
    parser.add_argument("--exact", action="store_true",
                        help="exact matching (default=inexact)")
    parser.add_argument("--colsearch", type=int, default=1,
                        help="1-based column index for search term")
    parser.add_argument("--colreplace", type=int, default=2,
                        help="1-based column index for replace term")
    parser.add_argument("--stop-not-found", action="store_true",
                        help="exit program if match not found")
    parser.add_argument("--warn-not-found", action="store_true",
                        help="print warning if match not found")
    return parser

def main(arguments=None):
    arguments = arguments if arguments is not None else sys.argv[1:]
    parser = generate_argparser()
    args = parser.parse_args(args=arguments)
    newlabels = {}
    if args.csv is not None and args.tsv is not None:
        raise RuntimeError("--tsv and --csv should not be used together")
    if args.csv is None and args.tsv is None:
        raise RuntimeError("--tsv or --csv required")
    if args.csv is not None:
        with open(args.csv) as csvfile:
            for line in csvfile:
                entry = line.rstrip().split(',')
                newlabels[entry[args.colsearch - 1]] = entry[args.colreplace - 1]
    if args.tsv is not None:
        with open(args.tsv) as tsvfile:
            for line in tsvfile:
                entry = line.rstrip().split('\t')
                newlabels[entry[args.colsearch - 1]] = entry[args.colreplace - 1]
    print(newlabels['LC499661'])
    for hdr, seq in fasta_iter(args.fasta):
        newlabel = None
        if args.exact is True:
            newlabel = newlabels.get(hdr, None)
        else:
            for tag in newlabels:
                if tag in hdr:
                    newlabel = newlabels[tag]
                    break
        if newlabel is None:
            if args.stop_not_found is True:
                raise RuntimeError("'{}' exact match not found in table".format(hdr))
            elif args.warn_not_found is True:
                print("Warning: '{}' exact match not found in table".format(hdr))
            newlabel = hdr[:]
        print(">{}\n{}".format(newlabel, seq), 
              file=args.out)
    return ''


    return ''

if __name__ == '__main__':
    main()
